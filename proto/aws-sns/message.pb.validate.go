// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws-sns/message.proto

package aws_sns

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TargetARN with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TargetARN) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Target

	// no validation rules for DeviceType

	return nil
}

// TargetARNValidationError is the validation error returned by
// TargetARN.Validate if the designated constraints aren't met.
type TargetARNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetARNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetARNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetARNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetARNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetARNValidationError) ErrorName() string { return "TargetARNValidationError" }

// Error satisfies the builtin error interface
func (e TargetARNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetARN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetARNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetARNValidationError{}

// Validate checks the field values on PublishInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PublishInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Platform

	// no validation rules for Name

	// no validation rules for Subject

	// no validation rules for Message

	for idx, item := range m.GetTarget() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishInputValidationError{
					field:  fmt.Sprintf("Target[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClickAction

	return nil
}

// PublishInputValidationError is the validation error returned by
// PublishInput.Validate if the designated constraints aren't met.
type PublishInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishInputValidationError) ErrorName() string { return "PublishInputValidationError" }

// Error satisfies the builtin error interface
func (e PublishInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishInputValidationError{}

// Validate checks the field values on PublishOutput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PublishOutput) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PublishOutputValidationError is the validation error returned by
// PublishOutput.Validate if the designated constraints aren't met.
type PublishOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishOutputValidationError) ErrorName() string { return "PublishOutputValidationError" }

// Error satisfies the builtin error interface
func (e PublishOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishOutputValidationError{}

// Validate checks the field values on CreateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEndpointRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for DeviceType

	return nil
}

// CreateEndpointRequestValidationError is the validation error returned by
// CreateEndpointRequest.Validate if the designated constraints aren't met.
type CreateEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointRequestValidationError) ErrorName() string {
	return "CreateEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointRequestValidationError{}

// Validate checks the field values on CreateEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEndpointResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EndpointArn

	return nil
}

// CreateEndpointResponseValidationError is the validation error returned by
// CreateEndpointResponse.Validate if the designated constraints aren't met.
type CreateEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointResponseValidationError) ErrorName() string {
	return "CreateEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointResponseValidationError{}
