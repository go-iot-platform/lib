// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/message.proto

package policy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PolicyIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PolicyIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetPolicyId()); err != nil {
		return PolicyIdRequestValidationError{
			field:  "PolicyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *PolicyIdRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PolicyIdRequestValidationError is the validation error returned by
// PolicyIdRequest.Validate if the designated constraints aren't met.
type PolicyIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyIdRequestValidationError) ErrorName() string { return "PolicyIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e PolicyIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyIdRequestValidationError{}

// Validate checks the field values on UpdateInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetPolicyId()); err != nil {
		return UpdateInfoRequestValidationError{
			field:  "PolicyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if _, ok := _UpdateInfoRequest_Name_NotInLookup[m.GetName()]; ok {
		return UpdateInfoRequestValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
	}

	// no validation rules for Description

	if len(m.GetResourceTypes()) < 1 {
		return UpdateInfoRequestValidationError{
			field:  "ResourceTypes",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateInfoRequestValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

func (m *UpdateInfoRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateInfoRequestValidationError is the validation error returned by
// UpdateInfoRequest.Validate if the designated constraints aren't met.
type UpdateInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInfoRequestValidationError) ErrorName() string {
	return "UpdateInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInfoRequestValidationError{}

var _UpdateInfoRequest_Name_NotInLookup = map[string]struct{}{
	"": {},
}

// Validate checks the field values on PolicyNameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PolicyNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _PolicyNameRequest_Name_NotInLookup[m.GetName()]; ok {
		return PolicyNameRequestValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
	}

	return nil
}

// PolicyNameRequestValidationError is the validation error returned by
// PolicyNameRequest.Validate if the designated constraints aren't met.
type PolicyNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyNameRequestValidationError) ErrorName() string {
	return "PolicyNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyNameRequestValidationError{}

var _PolicyNameRequest_Name_NotInLookup = map[string]struct{}{
	"": {},
}

// Validate checks the field values on UserIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		return UserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *UserIdRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserIdRequestValidationError is the validation error returned by
// UserIdRequest.Validate if the designated constraints aren't met.
type UserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdRequestValidationError) ErrorName() string { return "UserIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdRequestValidationError{}

// Validate checks the field values on PolicyData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PolicyData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PolicyId

	// no validation rules for CustomerNumber

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Type

	// no validation rules for IsActive

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyDataValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PolicyDataValidationError is the validation error returned by
// PolicyData.Validate if the designated constraints aren't met.
type PolicyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDataValidationError) ErrorName() string { return "PolicyDataValidationError" }

// Error satisfies the builtin error interface
func (e PolicyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDataValidationError{}

// Validate checks the field values on ResourceTypes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceTypes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if _, ok := _ResourceTypes_Effect_InLookup[m.GetEffect()]; !ok {
		return ResourceTypesValidationError{
			field:  "Effect",
			reason: "value must be in list [Allow Deny]",
		}
	}

	if len(m.GetActions()) < 1 {
		return ResourceTypesValidationError{
			field:  "Actions",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if len(m.GetResources()) < 1 {
		return ResourceTypesValidationError{
			field:  "Resources",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// ResourceTypesValidationError is the validation error returned by
// ResourceTypes.Validate if the designated constraints aren't met.
type ResourceTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceTypesValidationError) ErrorName() string { return "ResourceTypesValidationError" }

// Error satisfies the builtin error interface
func (e ResourceTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceTypesValidationError{}

var _ResourceTypes_Effect_InLookup = map[string]struct{}{
	"Allow": {},
	"Deny":  {},
}

// Validate checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() < 5 {
		return ListPoliciesRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 5",
		}
	}

	if m.GetSkip() < 0 {
		return ListPoliciesRequestValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
	}

	if len(m.GetKeyword()) > 15 {
		return ListPoliciesRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 15 bytes",
		}
	}

	if len(m.GetKeysort()) > 15 {
		return ListPoliciesRequestValidationError{
			field:  "Keysort",
			reason: "value length must be at most 15 bytes",
		}
	}

	// no validation rules for IsAsc

	if _, ok := _ListPoliciesRequest_IsActive_InLookup[m.GetIsActive()]; !ok {
		return ListPoliciesRequestValidationError{
			field:  "IsActive",
			reason: "value must be in list [true false ]",
		}
	}

	if _, ok := ListPoliciesRequest_Type_name[int32(m.GetType())]; !ok {
		return ListPoliciesRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ListPoliciesRequestValidationError is the validation error returned by
// ListPoliciesRequest.Validate if the designated constraints aren't met.
type ListPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesRequestValidationError) ErrorName() string {
	return "ListPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesRequestValidationError{}

var _ListPoliciesRequest_IsActive_InLookup = map[string]struct{}{
	"true":  {},
	"false": {},
	"":      {},
}

// Validate checks the field values on PoliciesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PoliciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PoliciesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PoliciesResponseValidationError is the validation error returned by
// PoliciesResponse.Validate if the designated constraints aren't met.
type PoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoliciesResponseValidationError) ErrorName() string { return "PoliciesResponseValidationError" }

// Error satisfies the builtin error interface
func (e PoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoliciesResponseValidationError{}

// Validate checks the field values on HelloRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HelloRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// HelloRequestValidationError is the validation error returned by
// HelloRequest.Validate if the designated constraints aren't met.
type HelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloRequestValidationError) ErrorName() string { return "HelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloRequestValidationError{}

// Validate checks the field values on HelloResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HelloResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// HelloResponseValidationError is the validation error returned by
// HelloResponse.Validate if the designated constraints aren't met.
type HelloResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloResponseValidationError) ErrorName() string { return "HelloResponseValidationError" }

// Error satisfies the builtin error interface
func (e HelloResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloResponseValidationError{}

// Validate checks the field values on GetByResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetByResourceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetByResourceRequest_ResourceType_Pattern.MatchString(m.GetResourceType()) {
		return GetByResourceRequestValidationError{
			field:  "ResourceType",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if !_GetByResourceRequest_ResourceOrn_Pattern.MatchString(m.GetResourceOrn()) {
		return GetByResourceRequestValidationError{
			field:  "ResourceOrn",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if _, ok := _GetByResourceRequest_Effect_InLookup[m.GetEffect()]; !ok {
		return GetByResourceRequestValidationError{
			field:  "Effect",
			reason: "value must be in list [allow deny]",
		}
	}

	return nil
}

// GetByResourceRequestValidationError is the validation error returned by
// GetByResourceRequest.Validate if the designated constraints aren't met.
type GetByResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByResourceRequestValidationError) ErrorName() string {
	return "GetByResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByResourceRequestValidationError{}

var _GetByResourceRequest_ResourceType_Pattern = regexp.MustCompile("[0-9a-z]")

var _GetByResourceRequest_ResourceOrn_Pattern = regexp.MustCompile("[0-9a-z]")

var _GetByResourceRequest_Effect_InLookup = map[string]struct{}{
	"allow": {},
	"deny":  {},
}

// Validate checks the field values on GetByResourceData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetByResourceData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PolicyId

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByResourceDataValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetByResourceDataValidationError is the validation error returned by
// GetByResourceData.Validate if the designated constraints aren't met.
type GetByResourceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByResourceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByResourceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByResourceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByResourceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByResourceDataValidationError) ErrorName() string {
	return "GetByResourceDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetByResourceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByResourceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByResourceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByResourceDataValidationError{}

// Validate checks the field values on GetByResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetByResourceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByResourceResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetByResourceResponseValidationError is the validation error returned by
// GetByResourceResponse.Validate if the designated constraints aren't met.
type GetByResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByResourceResponseValidationError) ErrorName() string {
	return "GetByResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByResourceResponseValidationError{}

// Validate checks the field values on GetByGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetByGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetByGroupRequest_GroupIds_Pattern.MatchString(m.GetGroupIds()) {
		return GetByGroupRequestValidationError{
			field:  "GroupIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	return nil
}

// GetByGroupRequestValidationError is the validation error returned by
// GetByGroupRequest.Validate if the designated constraints aren't met.
type GetByGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByGroupRequestValidationError) ErrorName() string {
	return "GetByGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByGroupRequestValidationError{}

var _GetByGroupRequest_GroupIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on GetByGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetByGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetByGroupResponseValidationError is the validation error returned by
// GetByGroupResponse.Validate if the designated constraints aren't met.
type GetByGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByGroupResponseValidationError) ErrorName() string {
	return "GetByGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByGroupResponseValidationError{}

// Validate checks the field values on CreatePolicyData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatePolicyData) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreatePolicyData_Name_Pattern.MatchString(m.GetName()) {
		return CreatePolicyDataValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if !_CreatePolicyData_Description_Pattern.MatchString(m.GetDescription()) {
		return CreatePolicyDataValidationError{
			field:  "Description",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePolicyDataValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreatePolicyDataValidationError is the validation error returned by
// CreatePolicyData.Validate if the designated constraints aren't met.
type CreatePolicyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyDataValidationError) ErrorName() string { return "CreatePolicyDataValidationError" }

// Error satisfies the builtin error interface
func (e CreatePolicyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyDataValidationError{}

var _CreatePolicyData_Name_Pattern = regexp.MustCompile("[0-9a-z]")

var _CreatePolicyData_Description_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if m.GetBody() == nil {
		return CreatePolicyRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Msg

	return nil
}

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeletePolicyRequest_PolicyIds_Pattern.MatchString(m.GetPolicyIds()) {
		return DeletePolicyRequestValidationError{
			field:  "PolicyIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	return nil
}

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

var _DeletePolicyRequest_PolicyIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Msg

	return nil
}

// DeletePolicyResponseValidationError is the validation error returned by
// DeletePolicyResponse.Validate if the designated constraints aren't met.
type DeletePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyResponseValidationError) ErrorName() string {
	return "DeletePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyResponseValidationError{}

// Validate checks the field values on AttachPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttachPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_AttachPolicyRequest_PolicyIds_Pattern.MatchString(m.GetPolicyIds()) {
		return AttachPolicyRequestValidationError{
			field:  "PolicyIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		return AttachPolicyRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *AttachPolicyRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AttachPolicyRequestValidationError is the validation error returned by
// AttachPolicyRequest.Validate if the designated constraints aren't met.
type AttachPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachPolicyRequestValidationError) ErrorName() string {
	return "AttachPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttachPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachPolicyRequestValidationError{}

var _AttachPolicyRequest_PolicyIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on DetachPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DetachPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DetachPolicyRequest_PolicyIds_Pattern.MatchString(m.GetPolicyIds()) {
		return DetachPolicyRequestValidationError{
			field:  "PolicyIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		return DetachPolicyRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DetachPolicyRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DetachPolicyRequestValidationError is the validation error returned by
// DetachPolicyRequest.Validate if the designated constraints aren't met.
type DetachPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachPolicyRequestValidationError) ErrorName() string {
	return "DetachPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetachPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachPolicyRequestValidationError{}

var _DetachPolicyRequest_PolicyIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on AttachPolicyToUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttachPolicyToUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_AttachPolicyToUserRequest_PolicyIds_Pattern.MatchString(m.GetPolicyIds()) {
		return AttachPolicyToUserRequestValidationError{
			field:  "PolicyIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		return AttachPolicyToUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *AttachPolicyToUserRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AttachPolicyToUserRequestValidationError is the validation error returned by
// AttachPolicyToUserRequest.Validate if the designated constraints aren't met.
type AttachPolicyToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachPolicyToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachPolicyToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachPolicyToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachPolicyToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachPolicyToUserRequestValidationError) ErrorName() string {
	return "AttachPolicyToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttachPolicyToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachPolicyToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachPolicyToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachPolicyToUserRequestValidationError{}

var _AttachPolicyToUserRequest_PolicyIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on DetachPolicyFromUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DetachPolicyFromUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DetachPolicyFromUserRequest_PolicyIds_Pattern.MatchString(m.GetPolicyIds()) {
		return DetachPolicyFromUserRequestValidationError{
			field:  "PolicyIds",
			reason: "value does not match regex pattern \"[0-9a-z]\"",
		}
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		return DetachPolicyFromUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DetachPolicyFromUserRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DetachPolicyFromUserRequestValidationError is the validation error returned
// by DetachPolicyFromUserRequest.Validate if the designated constraints
// aren't met.
type DetachPolicyFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachPolicyFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachPolicyFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachPolicyFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachPolicyFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachPolicyFromUserRequestValidationError) ErrorName() string {
	return "DetachPolicyFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetachPolicyFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachPolicyFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachPolicyFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachPolicyFromUserRequestValidationError{}

var _DetachPolicyFromUserRequest_PolicyIds_Pattern = regexp.MustCompile("[0-9a-z]")

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() < 5 {
		return ListUserRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 5",
		}
	}

	if m.GetSkip() < 0 {
		return ListUserRequestValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
	}

	if len(m.GetKeyword()) > 15 {
		return ListUserRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 15 bytes",
		}
	}

	if len(m.GetKeysort()) > 15 {
		return ListUserRequestValidationError{
			field:  "Keysort",
			reason: "value length must be at most 15 bytes",
		}
	}

	// no validation rules for IsAsc

	if _, ok := _ListUserRequest_IsActive_InLookup[m.GetIsActive()]; !ok {
		return ListUserRequestValidationError{
			field:  "IsActive",
			reason: "value must be in list [true false ]",
		}
	}

	if _, ok := ListUserRequest_TypeData_name[int32(m.GetType())]; !ok {
		return ListUserRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

var _ListUserRequest_IsActive_InLookup = map[string]struct{}{
	"true":  {},
	"false": {},
	"":      {},
}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on BindSystemPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BindSystemPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		return BindSystemPolicyRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *BindSystemPolicyRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BindSystemPolicyRequestValidationError is the validation error returned by
// BindSystemPolicyRequest.Validate if the designated constraints aren't met.
type BindSystemPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindSystemPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindSystemPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindSystemPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindSystemPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindSystemPolicyRequestValidationError) ErrorName() string {
	return "BindSystemPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindSystemPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindSystemPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindSystemPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindSystemPolicyRequestValidationError{}

// Validate checks the field values on BindResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BindResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// BindResponseValidationError is the validation error returned by
// BindResponse.Validate if the designated constraints aren't met.
type BindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindResponseValidationError) ErrorName() string { return "BindResponseValidationError" }

// Error satisfies the builtin error interface
func (e BindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindResponseValidationError{}

// Validate checks the field values on BindUserPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BindUserPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		return BindUserPolicyRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for PolicyIds

	return nil
}

func (m *BindUserPolicyRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BindUserPolicyRequestValidationError is the validation error returned by
// BindUserPolicyRequest.Validate if the designated constraints aren't met.
type BindUserPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindUserPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindUserPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindUserPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindUserPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindUserPolicyRequestValidationError) ErrorName() string {
	return "BindUserPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindUserPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindUserPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindUserPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindUserPolicyRequestValidationError{}

// Validate checks the field values on GetSystemPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemPoliciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() < 5 {
		return GetSystemPoliciesRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 5",
		}
	}

	if m.GetSkip() < 0 {
		return GetSystemPoliciesRequestValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
	}

	if len(m.GetKeyword()) > 15 {
		return GetSystemPoliciesRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 15 bytes",
		}
	}

	if len(m.GetKeysort()) > 15 {
		return GetSystemPoliciesRequestValidationError{
			field:  "Keysort",
			reason: "value length must be at most 15 bytes",
		}
	}

	// no validation rules for IsAsc

	// no validation rules for IsActive

	return nil
}

// GetSystemPoliciesRequestValidationError is the validation error returned by
// GetSystemPoliciesRequest.Validate if the designated constraints aren't met.
type GetSystemPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemPoliciesRequestValidationError) ErrorName() string {
	return "GetSystemPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemPoliciesRequestValidationError{}

// Validate checks the field values on GetSystemPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemPoliciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemPoliciesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSystemPoliciesResponseValidationError is the validation error returned by
// GetSystemPoliciesResponse.Validate if the designated constraints aren't met.
type GetSystemPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemPoliciesResponseValidationError) ErrorName() string {
	return "GetSystemPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemPoliciesResponseValidationError{}

// Validate checks the field values on GetSystemPoliciesByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetSystemPoliciesByUserIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemPoliciesByUserIdResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSystemPoliciesByUserIdResponseValidationError is the validation error
// returned by GetSystemPoliciesByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetSystemPoliciesByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemPoliciesByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemPoliciesByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemPoliciesByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemPoliciesByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemPoliciesByUserIdResponseValidationError) ErrorName() string {
	return "GetSystemPoliciesByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemPoliciesByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemPoliciesByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemPoliciesByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemPoliciesByUserIdResponseValidationError{}

// Validate checks the field values on CachePolicyData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CachePolicyData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PolicyId

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CachePolicyDataValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CachePolicyDataValidationError is the validation error returned by
// CachePolicyData.Validate if the designated constraints aren't met.
type CachePolicyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CachePolicyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CachePolicyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CachePolicyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CachePolicyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CachePolicyDataValidationError) ErrorName() string { return "CachePolicyDataValidationError" }

// Error satisfies the builtin error interface
func (e CachePolicyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCachePolicyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CachePolicyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CachePolicyDataValidationError{}

// Validate checks the field values on ListGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() < 5 {
		return ListGroupRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 5",
		}
	}

	if m.GetSkip() < 0 {
		return ListGroupRequestValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
	}

	if len(m.GetKeyword()) > 15 {
		return ListGroupRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 15 bytes",
		}
	}

	if len(m.GetKeysort()) > 15 {
		return ListGroupRequestValidationError{
			field:  "Keysort",
			reason: "value length must be at most 15 bytes",
		}
	}

	// no validation rules for IsAsc

	if _, ok := _ListGroupRequest_IsActive_InLookup[m.GetIsActive()]; !ok {
		return ListGroupRequestValidationError{
			field:  "IsActive",
			reason: "value must be in list [true false ]",
		}
	}

	if _, ok := ListGroupRequest_TypeData_name[int32(m.GetType())]; !ok {
		return ListGroupRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ListGroupRequestValidationError is the validation error returned by
// ListGroupRequest.Validate if the designated constraints aren't met.
type ListGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupRequestValidationError) ErrorName() string { return "ListGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupRequestValidationError{}

var _ListGroupRequest_IsActive_InLookup = map[string]struct{}{
	"true":  {},
	"false": {},
	"":      {},
}

// Validate checks the field values on ListGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGroupResponseValidationError is the validation error returned by
// ListGroupResponse.Validate if the designated constraints aren't met.
type ListGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupResponseValidationError) ErrorName() string {
	return "ListGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupResponseValidationError{}

// Validate checks the field values on GroupData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GroupData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GroupDataValidationError is the validation error returned by
// GroupData.Validate if the designated constraints aren't met.
type GroupDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDataValidationError) ErrorName() string { return "GroupDataValidationError" }

// Error satisfies the builtin error interface
func (e GroupDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDataValidationError{}

// Validate checks the field values on GroupIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GroupIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		return GroupIdRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GroupIdRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GroupIdRequestValidationError is the validation error returned by
// GroupIdRequest.Validate if the designated constraints aren't met.
type GroupIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdRequestValidationError) ErrorName() string { return "GroupIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GroupIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdRequestValidationError{}

// Validate checks the field values on ListUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserResponseValidationError is the validation error returned by
// ListUserResponse.Validate if the designated constraints aren't met.
type ListUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserResponseValidationError) ErrorName() string { return "ListUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserResponseValidationError{}

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}
