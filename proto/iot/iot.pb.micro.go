// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot/iot.proto

package iot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/go-iot-platform/go-micro/api"
	client "github.com/go-iot-platform/go-micro/client"
	server "github.com/go-iot-platform/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotSvc service

func NewIotSvcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IotSvc service

type IotSvcService interface {
	GetGateway(ctx context.Context, in *ThingRequest, opts ...client.CallOption) (*ThingResponse, error)
	GetThing(ctx context.Context, in *ThingRequest, opts ...client.CallOption) (*ThingResponse, error)
	ExcuteTemplate(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error)
}

type iotSvcService struct {
	c    client.Client
	name string
}

func NewIotSvcService(name string, c client.Client) IotSvcService {
	return &iotSvcService{
		c:    c,
		name: name,
	}
}

func (c *iotSvcService) GetGateway(ctx context.Context, in *ThingRequest, opts ...client.CallOption) (*ThingResponse, error) {
	req := c.c.NewRequest(c.name, "IotSvc.GetGateway", in)
	out := new(ThingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotSvcService) GetThing(ctx context.Context, in *ThingRequest, opts ...client.CallOption) (*ThingResponse, error) {
	req := c.c.NewRequest(c.name, "IotSvc.GetThing", in)
	out := new(ThingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotSvcService) ExcuteTemplate(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "IotSvc.ExcuteTemplate", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotSvc service

type IotSvcHandler interface {
	GetGateway(context.Context, *ThingRequest, *ThingResponse) error
	GetThing(context.Context, *ThingRequest, *ThingResponse) error
	ExcuteTemplate(context.Context, *DataRequest, *DataResponse) error
}

func RegisterIotSvcHandler(s server.Server, hdlr IotSvcHandler, opts ...server.HandlerOption) error {
	type iotSvc interface {
		GetGateway(ctx context.Context, in *ThingRequest, out *ThingResponse) error
		GetThing(ctx context.Context, in *ThingRequest, out *ThingResponse) error
		ExcuteTemplate(ctx context.Context, in *DataRequest, out *DataResponse) error
	}
	type IotSvc struct {
		iotSvc
	}
	h := &iotSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&IotSvc{h}, opts...))
}

type iotSvcHandler struct {
	IotSvcHandler
}

func (h *iotSvcHandler) GetGateway(ctx context.Context, in *ThingRequest, out *ThingResponse) error {
	return h.IotSvcHandler.GetGateway(ctx, in, out)
}

func (h *iotSvcHandler) GetThing(ctx context.Context, in *ThingRequest, out *ThingResponse) error {
	return h.IotSvcHandler.GetThing(ctx, in, out)
}

func (h *iotSvcHandler) ExcuteTemplate(ctx context.Context, in *DataRequest, out *DataResponse) error {
	return h.IotSvcHandler.ExcuteTemplate(ctx, in, out)
}
