// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: alert/alert.proto

package alert

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _alert_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AlertRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AlertRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for CompareValue

	// no validation rules for Value

	return nil
}

// AlertRequestValidationError is the validation error returned by
// AlertRequest.Validate if the designated constraints aren't met.
type AlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRequestValidationError) ErrorName() string { return "AlertRequestValidationError" }

// Error satisfies the builtin error interface
func (e AlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRequestValidationError{}

// Validate checks the field values on AlertResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AlertResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// AlertResponseValidationError is the validation error returned by
// AlertResponse.Validate if the designated constraints aren't met.
type AlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertResponseValidationError) ErrorName() string { return "AlertResponseValidationError" }

// Error satisfies the builtin error interface
func (e AlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertResponseValidationError{}

// Validate checks the field values on AlertTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AlertTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AlertTypeRequestValidationError is the validation error returned by
// AlertTypeRequest.Validate if the designated constraints aren't met.
type AlertTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTypeRequestValidationError) ErrorName() string { return "AlertTypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AlertTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTypeRequestValidationError{}

// Validate checks the field values on AlertTypeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AlertTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AlertTypeResponseValidationError is the validation error returned by
// AlertTypeResponse.Validate if the designated constraints aren't met.
type AlertTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTypeResponseValidationError) ErrorName() string {
	return "AlertTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AlertTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTypeResponseValidationError{}

// Validate checks the field values on AlertType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AlertType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// AlertTypeValidationError is the validation error returned by
// AlertType.Validate if the designated constraints aren't met.
type AlertTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTypeValidationError) ErrorName() string { return "AlertTypeValidationError" }

// Error satisfies the builtin error interface
func (e AlertTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTypeValidationError{}
