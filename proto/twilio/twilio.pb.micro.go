// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: twilio/twilio.proto

package twilio

import (
	fmt "fmt"
	api1 "github.com/go-iot-platform/lib/proto/api"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/go-iot-platform/go-micro/api"
	client "github.com/go-iot-platform/go-micro/client"
	server "github.com/go-iot-platform/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CallingSvc service

func NewCallingSvcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CallingSvc service

type CallingSvcService interface {
	SendCall(ctx context.Context, in *CallingRequest, opts ...client.CallOption) (*CallingResponse, error)
	SendMessage(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error)
	GetCallBySid(ctx context.Context, in *GetCallRequest, opts ...client.CallOption) (*GetCallResponse, error)
	GetMessageBySid(ctx context.Context, in *GetCallRequest, opts ...client.CallOption) (*GetMessageResponse, error)
	SendCallAPI(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	SendMessageAPI(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type callingSvcService struct {
	c    client.Client
	name string
}

func NewCallingSvcService(name string, c client.Client) CallingSvcService {
	return &callingSvcService{
		c:    c,
		name: name,
	}
}

func (c *callingSvcService) SendCall(ctx context.Context, in *CallingRequest, opts ...client.CallOption) (*CallingResponse, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.SendCall", in)
	out := new(CallingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingSvcService) SendMessage(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.SendMessage", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingSvcService) GetCallBySid(ctx context.Context, in *GetCallRequest, opts ...client.CallOption) (*GetCallResponse, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.GetCallBySid", in)
	out := new(GetCallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingSvcService) GetMessageBySid(ctx context.Context, in *GetCallRequest, opts ...client.CallOption) (*GetMessageResponse, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.GetMessageBySid", in)
	out := new(GetMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingSvcService) SendCallAPI(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.SendCallAPI", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingSvcService) SendMessageAPI(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "CallingSvc.SendMessageAPI", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CallingSvc service

type CallingSvcHandler interface {
	SendCall(context.Context, *CallingRequest, *CallingResponse) error
	SendMessage(context.Context, *MessageRequest, *MessageResponse) error
	GetCallBySid(context.Context, *GetCallRequest, *GetCallResponse) error
	GetMessageBySid(context.Context, *GetCallRequest, *GetMessageResponse) error
	SendCallAPI(context.Context, *api1.Request, *api1.Response) error
	SendMessageAPI(context.Context, *api1.Request, *api1.Response) error
}

func RegisterCallingSvcHandler(s server.Server, hdlr CallingSvcHandler, opts ...server.HandlerOption) error {
	type callingSvc interface {
		SendCall(ctx context.Context, in *CallingRequest, out *CallingResponse) error
		SendMessage(ctx context.Context, in *MessageRequest, out *MessageResponse) error
		GetCallBySid(ctx context.Context, in *GetCallRequest, out *GetCallResponse) error
		GetMessageBySid(ctx context.Context, in *GetCallRequest, out *GetMessageResponse) error
		SendCallAPI(ctx context.Context, in *api1.Request, out *api1.Response) error
		SendMessageAPI(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type CallingSvc struct {
		callingSvc
	}
	h := &callingSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&CallingSvc{h}, opts...))
}

type callingSvcHandler struct {
	CallingSvcHandler
}

func (h *callingSvcHandler) SendCall(ctx context.Context, in *CallingRequest, out *CallingResponse) error {
	return h.CallingSvcHandler.SendCall(ctx, in, out)
}

func (h *callingSvcHandler) SendMessage(ctx context.Context, in *MessageRequest, out *MessageResponse) error {
	return h.CallingSvcHandler.SendMessage(ctx, in, out)
}

func (h *callingSvcHandler) GetCallBySid(ctx context.Context, in *GetCallRequest, out *GetCallResponse) error {
	return h.CallingSvcHandler.GetCallBySid(ctx, in, out)
}

func (h *callingSvcHandler) GetMessageBySid(ctx context.Context, in *GetCallRequest, out *GetMessageResponse) error {
	return h.CallingSvcHandler.GetMessageBySid(ctx, in, out)
}

func (h *callingSvcHandler) SendCallAPI(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.CallingSvcHandler.SendCallAPI(ctx, in, out)
}

func (h *callingSvcHandler) SendMessageAPI(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.CallingSvcHandler.SendMessageAPI(ctx, in, out)
}
