// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payment/message.proto

package message

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Core service

type CoreService interface {
	// payment api
	GetConfigAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	// rpc Topup (go.api.Request) returns (go.api.Response);
	ChargeAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	CountFeeAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RenewAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	// transaction api
	GetTransactionHistoryAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	// subscription api
	GetLastSubscriptionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetListSubscriptionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	PaymentSettingAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	// wallet api
	// rpc GetWallet (go.api.Request) returns (go.api.Response);
	//Job runner
	JobRunnerAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	StatusRunnerAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type coreService struct {
	c    client.Client
	name string
}

func NewCoreService(name string, c client.Client) CoreService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "core"
	}
	return &coreService{
		c:    c,
		name: name,
	}
}

func (c *coreService) GetConfigAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.GetConfigAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) ChargeAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.ChargeAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) CountFeeAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.CountFeeAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) RenewAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.RenewAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) GetTransactionHistoryAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.GetTransactionHistoryAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) GetLastSubscriptionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.GetLastSubscriptionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) GetListSubscriptionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.GetListSubscriptionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) PaymentSettingAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.PaymentSettingAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) JobRunnerAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.JobRunnerAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreService) StatusRunnerAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Core.StatusRunnerAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Core service

type CoreHandler interface {
	// payment api
	GetConfigAPI(context.Context, *proto1.Request, *proto1.Response) error
	// rpc Topup (go.api.Request) returns (go.api.Response);
	ChargeAPI(context.Context, *proto1.Request, *proto1.Response) error
	CountFeeAPI(context.Context, *proto1.Request, *proto1.Response) error
	RenewAPI(context.Context, *proto1.Request, *proto1.Response) error
	// transaction api
	GetTransactionHistoryAPI(context.Context, *proto1.Request, *proto1.Response) error
	// subscription api
	GetLastSubscriptionAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetListSubscriptionAPI(context.Context, *proto1.Request, *proto1.Response) error
	PaymentSettingAPI(context.Context, *proto1.Request, *proto1.Response) error
	// wallet api
	// rpc GetWallet (go.api.Request) returns (go.api.Response);
	//Job runner
	JobRunnerAPI(context.Context, *proto1.Request, *proto1.Response) error
	StatusRunnerAPI(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterCoreHandler(s server.Server, hdlr CoreHandler, opts ...server.HandlerOption) error {
	type core interface {
		GetConfigAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ChargeAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		CountFeeAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RenewAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetTransactionHistoryAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetLastSubscriptionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetListSubscriptionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		PaymentSettingAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		JobRunnerAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		StatusRunnerAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Core struct {
		core
	}
	h := &coreHandler{hdlr}
	return s.Handle(s.NewHandler(&Core{h}, opts...))
}

type coreHandler struct {
	CoreHandler
}

func (h *coreHandler) GetConfigAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.GetConfigAPI(ctx, in, out)
}

func (h *coreHandler) ChargeAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.ChargeAPI(ctx, in, out)
}

func (h *coreHandler) CountFeeAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.CountFeeAPI(ctx, in, out)
}

func (h *coreHandler) RenewAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.RenewAPI(ctx, in, out)
}

func (h *coreHandler) GetTransactionHistoryAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.GetTransactionHistoryAPI(ctx, in, out)
}

func (h *coreHandler) GetLastSubscriptionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.GetLastSubscriptionAPI(ctx, in, out)
}

func (h *coreHandler) GetListSubscriptionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.GetListSubscriptionAPI(ctx, in, out)
}

func (h *coreHandler) PaymentSettingAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.PaymentSettingAPI(ctx, in, out)
}

func (h *coreHandler) JobRunnerAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.JobRunnerAPI(ctx, in, out)
}

func (h *coreHandler) StatusRunnerAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.CoreHandler.StatusRunnerAPI(ctx, in, out)
}

// Client API for PaymentSrv service

type PaymentSrvService interface {
	AddPaymentGateway(ctx context.Context, in *PaymentGatewayRequest, opts ...client.CallOption) (*MessageResponse, error)
	ListPaymentGateways(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ListPaymentGatewaysResponse, error)
	//rpc UpdatePaymentGateway (PaymentGatewayRequest) returns (MessageResponse);
	DeletePaymentGateway(ctx context.Context, in *UUIDRequest, opts ...client.CallOption) (*MessageResponse, error)
	GetPaymentGateway(ctx context.Context, in *UUIDRequest, opts ...client.CallOption) (*PaymentGatewayResponse, error)
}

type paymentSrvService struct {
	c    client.Client
	name string
}

func NewPaymentSrvService(name string, c client.Client) PaymentSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "paymentsrv"
	}
	return &paymentSrvService{
		c:    c,
		name: name,
	}
}

func (c *paymentSrvService) AddPaymentGateway(ctx context.Context, in *PaymentGatewayRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentSrv.AddPaymentGateway", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentSrvService) ListPaymentGateways(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ListPaymentGatewaysResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentSrv.ListPaymentGateways", in)
	out := new(ListPaymentGatewaysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentSrvService) DeletePaymentGateway(ctx context.Context, in *UUIDRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentSrv.DeletePaymentGateway", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentSrvService) GetPaymentGateway(ctx context.Context, in *UUIDRequest, opts ...client.CallOption) (*PaymentGatewayResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentSrv.GetPaymentGateway", in)
	out := new(PaymentGatewayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentSrv service

type PaymentSrvHandler interface {
	AddPaymentGateway(context.Context, *PaymentGatewayRequest, *MessageResponse) error
	ListPaymentGateways(context.Context, *empty.Empty, *ListPaymentGatewaysResponse) error
	//rpc UpdatePaymentGateway (PaymentGatewayRequest) returns (MessageResponse);
	DeletePaymentGateway(context.Context, *UUIDRequest, *MessageResponse) error
	GetPaymentGateway(context.Context, *UUIDRequest, *PaymentGatewayResponse) error
}

func RegisterPaymentSrvHandler(s server.Server, hdlr PaymentSrvHandler, opts ...server.HandlerOption) error {
	type paymentSrv interface {
		AddPaymentGateway(ctx context.Context, in *PaymentGatewayRequest, out *MessageResponse) error
		ListPaymentGateways(ctx context.Context, in *empty.Empty, out *ListPaymentGatewaysResponse) error
		DeletePaymentGateway(ctx context.Context, in *UUIDRequest, out *MessageResponse) error
		GetPaymentGateway(ctx context.Context, in *UUIDRequest, out *PaymentGatewayResponse) error
	}
	type PaymentSrv struct {
		paymentSrv
	}
	h := &paymentSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentSrv{h}, opts...))
}

type paymentSrvHandler struct {
	PaymentSrvHandler
}

func (h *paymentSrvHandler) AddPaymentGateway(ctx context.Context, in *PaymentGatewayRequest, out *MessageResponse) error {
	return h.PaymentSrvHandler.AddPaymentGateway(ctx, in, out)
}

func (h *paymentSrvHandler) ListPaymentGateways(ctx context.Context, in *empty.Empty, out *ListPaymentGatewaysResponse) error {
	return h.PaymentSrvHandler.ListPaymentGateways(ctx, in, out)
}

func (h *paymentSrvHandler) DeletePaymentGateway(ctx context.Context, in *UUIDRequest, out *MessageResponse) error {
	return h.PaymentSrvHandler.DeletePaymentGateway(ctx, in, out)
}

func (h *paymentSrvHandler) GetPaymentGateway(ctx context.Context, in *UUIDRequest, out *PaymentGatewayResponse) error {
	return h.PaymentSrvHandler.GetPaymentGateway(ctx, in, out)
}

// Client API for Pkg service

type PkgService interface {
	AddPackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ListPackagesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	UpdatePackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DeletePackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetPackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	// Region CRUD API
	RegionsAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	AddRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	UpdateRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DeleteRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type pkgService struct {
	c    client.Client
	name string
}

func NewPkgService(name string, c client.Client) PkgService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pkg"
	}
	return &pkgService{
		c:    c,
		name: name,
	}
}

func (c *pkgService) AddPackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.AddPackageAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) ListPackagesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.ListPackagesAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) UpdatePackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.UpdatePackageAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) DeletePackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.DeletePackageAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) GetPackageAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.GetPackageAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) RegionsAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.RegionsAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) AddRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.AddRegionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) UpdateRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.UpdateRegionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) DeleteRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.DeleteRegionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgService) GetRegionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Pkg.GetRegionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pkg service

type PkgHandler interface {
	AddPackageAPI(context.Context, *proto1.Request, *proto1.Response) error
	ListPackagesAPI(context.Context, *proto1.Request, *proto1.Response) error
	UpdatePackageAPI(context.Context, *proto1.Request, *proto1.Response) error
	DeletePackageAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetPackageAPI(context.Context, *proto1.Request, *proto1.Response) error
	// Region CRUD API
	RegionsAPI(context.Context, *proto1.Request, *proto1.Response) error
	AddRegionAPI(context.Context, *proto1.Request, *proto1.Response) error
	UpdateRegionAPI(context.Context, *proto1.Request, *proto1.Response) error
	DeleteRegionAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetRegionAPI(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterPkgHandler(s server.Server, hdlr PkgHandler, opts ...server.HandlerOption) error {
	type pkg interface {
		AddPackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ListPackagesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		UpdatePackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DeletePackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetPackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RegionsAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		AddRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		UpdateRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DeleteRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Pkg struct {
		pkg
	}
	h := &pkgHandler{hdlr}
	return s.Handle(s.NewHandler(&Pkg{h}, opts...))
}

type pkgHandler struct {
	PkgHandler
}

func (h *pkgHandler) AddPackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.AddPackageAPI(ctx, in, out)
}

func (h *pkgHandler) ListPackagesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.ListPackagesAPI(ctx, in, out)
}

func (h *pkgHandler) UpdatePackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.UpdatePackageAPI(ctx, in, out)
}

func (h *pkgHandler) DeletePackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.DeletePackageAPI(ctx, in, out)
}

func (h *pkgHandler) GetPackageAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.GetPackageAPI(ctx, in, out)
}

func (h *pkgHandler) RegionsAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.RegionsAPI(ctx, in, out)
}

func (h *pkgHandler) AddRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.AddRegionAPI(ctx, in, out)
}

func (h *pkgHandler) UpdateRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.UpdateRegionAPI(ctx, in, out)
}

func (h *pkgHandler) DeleteRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.DeleteRegionAPI(ctx, in, out)
}

func (h *pkgHandler) GetRegionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PkgHandler.GetRegionAPI(ctx, in, out)
}

// Client API for PkgSrv service

type PkgSrvService interface {
	GetPackageByUUID(ctx context.Context, in *GetPackagesRequest, opts ...client.CallOption) (*GetPackagesResponse, error)
}

type pkgSrvService struct {
	c    client.Client
	name string
}

func NewPkgSrvService(name string, c client.Client) PkgSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pkgsrv"
	}
	return &pkgSrvService{
		c:    c,
		name: name,
	}
}

func (c *pkgSrvService) GetPackageByUUID(ctx context.Context, in *GetPackagesRequest, opts ...client.CallOption) (*GetPackagesResponse, error) {
	req := c.c.NewRequest(c.name, "PkgSrv.GetPackageByUUID", in)
	out := new(GetPackagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PkgSrv service

type PkgSrvHandler interface {
	GetPackageByUUID(context.Context, *GetPackagesRequest, *GetPackagesResponse) error
}

func RegisterPkgSrvHandler(s server.Server, hdlr PkgSrvHandler, opts ...server.HandlerOption) error {
	type pkgSrv interface {
		GetPackageByUUID(ctx context.Context, in *GetPackagesRequest, out *GetPackagesResponse) error
	}
	type PkgSrv struct {
		pkgSrv
	}
	h := &pkgSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&PkgSrv{h}, opts...))
}

type pkgSrvHandler struct {
	PkgSrvHandler
}

func (h *pkgSrvHandler) GetPackageByUUID(ctx context.Context, in *GetPackagesRequest, out *GetPackagesResponse) error {
	return h.PkgSrvHandler.GetPackageByUUID(ctx, in, out)
}

// Client API for Subscription service

type SubscriptionService interface {
	CreateSubscription(ctx context.Context, in *CreateSubRequest, opts ...client.CallOption) (*GetDetailResponse, error)
	GetSubscriptionDetail(ctx context.Context, in *GetDetailRequest, opts ...client.CallOption) (*GetDetailResponse, error)
	GetListSubscription(ctx context.Context, in *GetListRequest, opts ...client.CallOption) (*GetListResponse, error)
	GetLastSubscription(ctx context.Context, in *GetSubscriptionsRequest, opts ...client.CallOption) (*GetSubscriptionsResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error)
}

type subscriptionService struct {
	c    client.Client
	name string
}

func NewSubscriptionService(name string, c client.Client) SubscriptionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "subscription"
	}
	return &subscriptionService{
		c:    c,
		name: name,
	}
}

func (c *subscriptionService) CreateSubscription(ctx context.Context, in *CreateSubRequest, opts ...client.CallOption) (*GetDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Subscription.CreateSubscription", in)
	out := new(GetDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionService) GetSubscriptionDetail(ctx context.Context, in *GetDetailRequest, opts ...client.CallOption) (*GetDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Subscription.GetSubscriptionDetail", in)
	out := new(GetDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionService) GetListSubscription(ctx context.Context, in *GetListRequest, opts ...client.CallOption) (*GetListResponse, error) {
	req := c.c.NewRequest(c.name, "Subscription.GetListSubscription", in)
	out := new(GetListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionService) GetLastSubscription(ctx context.Context, in *GetSubscriptionsRequest, opts ...client.CallOption) (*GetSubscriptionsResponse, error) {
	req := c.c.NewRequest(c.name, "Subscription.GetLastSubscription", in)
	out := new(GetSubscriptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionService) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "Subscription.UpdateSubscription", in)
	out := new(UpdateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscription service

type SubscriptionHandler interface {
	CreateSubscription(context.Context, *CreateSubRequest, *GetDetailResponse) error
	GetSubscriptionDetail(context.Context, *GetDetailRequest, *GetDetailResponse) error
	GetListSubscription(context.Context, *GetListRequest, *GetListResponse) error
	GetLastSubscription(context.Context, *GetSubscriptionsRequest, *GetSubscriptionsResponse) error
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest, *UpdateSubscriptionResponse) error
}

func RegisterSubscriptionHandler(s server.Server, hdlr SubscriptionHandler, opts ...server.HandlerOption) error {
	type subscription interface {
		CreateSubscription(ctx context.Context, in *CreateSubRequest, out *GetDetailResponse) error
		GetSubscriptionDetail(ctx context.Context, in *GetDetailRequest, out *GetDetailResponse) error
		GetListSubscription(ctx context.Context, in *GetListRequest, out *GetListResponse) error
		GetLastSubscription(ctx context.Context, in *GetSubscriptionsRequest, out *GetSubscriptionsResponse) error
		UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error
	}
	type Subscription struct {
		subscription
	}
	h := &subscriptionHandler{hdlr}
	return s.Handle(s.NewHandler(&Subscription{h}, opts...))
}

type subscriptionHandler struct {
	SubscriptionHandler
}

func (h *subscriptionHandler) CreateSubscription(ctx context.Context, in *CreateSubRequest, out *GetDetailResponse) error {
	return h.SubscriptionHandler.CreateSubscription(ctx, in, out)
}

func (h *subscriptionHandler) GetSubscriptionDetail(ctx context.Context, in *GetDetailRequest, out *GetDetailResponse) error {
	return h.SubscriptionHandler.GetSubscriptionDetail(ctx, in, out)
}

func (h *subscriptionHandler) GetListSubscription(ctx context.Context, in *GetListRequest, out *GetListResponse) error {
	return h.SubscriptionHandler.GetListSubscription(ctx, in, out)
}

func (h *subscriptionHandler) GetLastSubscription(ctx context.Context, in *GetSubscriptionsRequest, out *GetSubscriptionsResponse) error {
	return h.SubscriptionHandler.GetLastSubscription(ctx, in, out)
}

func (h *subscriptionHandler) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error {
	return h.SubscriptionHandler.UpdateSubscription(ctx, in, out)
}

// Client API for Transaction service

type TransactionService interface {
	CreateTransactions(ctx context.Context, in *CreateTransactionRequest, opts ...client.CallOption) (*CreateTransactionResponse, error)
	GetTransaction(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...client.CallOption) (*GetResponse, error)
}

type transactionService struct {
	c    client.Client
	name string
}

func NewTransactionService(name string, c client.Client) TransactionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "transaction"
	}
	return &transactionService{
		c:    c,
		name: name,
	}
}

func (c *transactionService) CreateTransactions(ctx context.Context, in *CreateTransactionRequest, opts ...client.CallOption) (*CreateTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.CreateTransactions", in)
	out := new(CreateTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) GetTransaction(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.GetTransaction", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.GetTransactionHistory", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transaction service

type TransactionHandler interface {
	CreateTransactions(context.Context, *CreateTransactionRequest, *CreateTransactionResponse) error
	GetTransaction(context.Context, *GetRequest, *GetResponse) error
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest, *GetResponse) error
}

func RegisterTransactionHandler(s server.Server, hdlr TransactionHandler, opts ...server.HandlerOption) error {
	type transaction interface {
		CreateTransactions(ctx context.Context, in *CreateTransactionRequest, out *CreateTransactionResponse) error
		GetTransaction(ctx context.Context, in *GetRequest, out *GetResponse) error
		GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, out *GetResponse) error
	}
	type Transaction struct {
		transaction
	}
	h := &transactionHandler{hdlr}
	return s.Handle(s.NewHandler(&Transaction{h}, opts...))
}

type transactionHandler struct {
	TransactionHandler
}

func (h *transactionHandler) CreateTransactions(ctx context.Context, in *CreateTransactionRequest, out *CreateTransactionResponse) error {
	return h.TransactionHandler.CreateTransactions(ctx, in, out)
}

func (h *transactionHandler) GetTransaction(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.TransactionHandler.GetTransaction(ctx, in, out)
}

func (h *transactionHandler) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, out *GetResponse) error {
	return h.TransactionHandler.GetTransactionHistory(ctx, in, out)
}

// Client API for WalletSrv service

type WalletSrvService interface {
	AddCoin(ctx context.Context, in *CoinRequest, opts ...client.CallOption) (*StatusCodeResponse, error)
	SubtractCoin(ctx context.Context, in *CoinRequest, opts ...client.CallOption) (*StatusCodeResponse, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...client.CallOption) (*GetWalletInfoResponse, error)
}

type walletSrvService struct {
	c    client.Client
	name string
}

func NewWalletSrvService(name string, c client.Client) WalletSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "walletsrv"
	}
	return &walletSrvService{
		c:    c,
		name: name,
	}
}

func (c *walletSrvService) AddCoin(ctx context.Context, in *CoinRequest, opts ...client.CallOption) (*StatusCodeResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.AddCoin", in)
	out := new(StatusCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) SubtractCoin(ctx context.Context, in *CoinRequest, opts ...client.CallOption) (*StatusCodeResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.SubtractCoin", in)
	out := new(StatusCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...client.CallOption) (*GetWalletInfoResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.GetWalletInfo", in)
	out := new(GetWalletInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletSrv service

type WalletSrvHandler interface {
	AddCoin(context.Context, *CoinRequest, *StatusCodeResponse) error
	SubtractCoin(context.Context, *CoinRequest, *StatusCodeResponse) error
	GetWalletInfo(context.Context, *GetWalletInfoRequest, *GetWalletInfoResponse) error
}

func RegisterWalletSrvHandler(s server.Server, hdlr WalletSrvHandler, opts ...server.HandlerOption) error {
	type walletSrv interface {
		AddCoin(ctx context.Context, in *CoinRequest, out *StatusCodeResponse) error
		SubtractCoin(ctx context.Context, in *CoinRequest, out *StatusCodeResponse) error
		GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, out *GetWalletInfoResponse) error
	}
	type WalletSrv struct {
		walletSrv
	}
	h := &walletSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletSrv{h}, opts...))
}

type walletSrvHandler struct {
	WalletSrvHandler
}

func (h *walletSrvHandler) AddCoin(ctx context.Context, in *CoinRequest, out *StatusCodeResponse) error {
	return h.WalletSrvHandler.AddCoin(ctx, in, out)
}

func (h *walletSrvHandler) SubtractCoin(ctx context.Context, in *CoinRequest, out *StatusCodeResponse) error {
	return h.WalletSrvHandler.SubtractCoin(ctx, in, out)
}

func (h *walletSrvHandler) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, out *GetWalletInfoResponse) error {
	return h.WalletSrvHandler.GetWalletInfo(ctx, in, out)
}
