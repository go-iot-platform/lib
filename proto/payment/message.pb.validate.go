// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment/message.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CoinRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CustomerNumber

	// no validation rules for Coin

	// no validation rules for Currency

	return nil
}

// CoinRequestValidationError is the validation error returned by
// CoinRequest.Validate if the designated constraints aren't met.
type CoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinRequestValidationError) ErrorName() string { return "CoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e CoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinRequestValidationError{}

// Validate checks the field values on StatusCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StatusCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// StatusCodeResponseValidationError is the validation error returned by
// StatusCodeResponse.Validate if the designated constraints aren't met.
type StatusCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusCodeResponseValidationError) ErrorName() string {
	return "StatusCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatusCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusCodeResponseValidationError{}

// Validate checks the field values on GetWalletInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWalletInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CustomerNumber

	// no validation rules for Currency

	return nil
}

// GetWalletInfoRequestValidationError is the validation error returned by
// GetWalletInfoRequest.Validate if the designated constraints aren't met.
type GetWalletInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletInfoRequestValidationError) ErrorName() string {
	return "GetWalletInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletInfoRequestValidationError{}

// Validate checks the field values on GetWalletInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWalletInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Data

	return nil
}

// GetWalletInfoResponseValidationError is the validation error returned by
// GetWalletInfoResponse.Validate if the designated constraints aren't met.
type GetWalletInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletInfoResponseValidationError) ErrorName() string {
	return "GetWalletInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletInfoResponseValidationError{}

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAmount() < 0 {
		return CreateTransactionRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetCurrencyCode()) != 3 {
		return CreateTransactionRequestValidationError{
			field:  "CurrencyCode",
			reason: "value length must be 3 runes",
		}

	}

	if utf8.RuneCountInString(m.GetTransactionMethod()) < 0 {
		return CreateTransactionRequestValidationError{
			field:  "TransactionMethod",
			reason: "value length must be at least 0 runes",
		}
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		return CreateTransactionRequestValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetCustomerNumber()) < 0 {
		return CreateTransactionRequestValidationError{
			field:  "CustomerNumber",
			reason: "value length must be at least 0 runes",
		}
	}

	// no validation rules for Service

	// no validation rules for Metadata

	// no validation rules for TransactionDetail

	// no validation rules for Agent

	return nil
}

func (m *CreateTransactionRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

// Validate checks the field values on CreateTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// CreateTransactionResponseValidationError is the validation error returned by
// CreateTransactionResponse.Validate if the designated constraints aren't met.
type CreateTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionResponseValidationError) ErrorName() string {
	return "CreateTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		return GetRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	// no validation rules for Code

	return nil
}

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on GetTransactionHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CustomerNumber

	return nil
}

// GetTransactionHistoryRequestValidationError is the validation error returned
// by GetTransactionHistoryRequest.Validate if the designated constraints
// aren't met.
type GetTransactionHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionHistoryRequestValidationError) ErrorName() string {
	return "GetTransactionHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionHistoryRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		return UpdateSubscriptionRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Duration

	// no validation rules for Status

	if v, ok := interface{}(m.GetChargeDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubscriptionRequestValidationError{
				field:  "ChargeDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *UpdateSubscriptionRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSubscriptionRequestValidationError is the validation error returned by
// UpdateSubscriptionRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSubscriptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// UpdateSubscriptionResponseValidationError is the validation error returned
// by UpdateSubscriptionResponse.Validate if the designated constraints aren't met.
type UpdateSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionResponseValidationError{}

// Validate checks the field values on CreateSubRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateSubRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetPackageUuid()); err != nil {
		return CreateSubRequestValidationError{
			field:  "PackageUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetCustomerNumber()) < 0 {
		return CreateSubRequestValidationError{
			field:  "CustomerNumber",
			reason: "value length must be at least 0 runes",
		}
	}

	if utf8.RuneCountInString(m.GetService()) < 0 {
		return CreateSubRequestValidationError{
			field:  "Service",
			reason: "value length must be at least 0 runes",
		}
	}

	if m.GetDuration() <= 0 {
		return CreateSubRequestValidationError{
			field:  "Duration",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for PromoCode

	return nil
}

func (m *CreateSubRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSubRequestValidationError is the validation error returned by
// CreateSubRequest.Validate if the designated constraints aren't met.
type CreateSubRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubRequestValidationError) ErrorName() string { return "CreateSubRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateSubRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubRequestValidationError{}

// Validate checks the field values on CacheField with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CacheField) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCustomerNumber()) < 0 {
		return CacheFieldValidationError{
			field:  "CustomerNumber",
			reason: "value length must be at least 0 runes",
		}
	}

	// no validation rules for Service

	// no validation rules for PackageUuid

	return nil
}

// CacheFieldValidationError is the validation error returned by
// CacheField.Validate if the designated constraints aren't met.
type CacheFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CacheFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CacheFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CacheFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CacheFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CacheFieldValidationError) ErrorName() string { return "CacheFieldValidationError" }

// Error satisfies the builtin error interface
func (e CacheFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCacheField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CacheFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CacheFieldValidationError{}

// Validate checks the field values on GetDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *GetDetailRequest_Uuid:

		if err := m._validateUuid(m.GetUuid()); err != nil {
			return GetDetailRequestValidationError{
				field:  "Uuid",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	case *GetDetailRequest_Field:

		if v, ok := interface{}(m.GetField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDetailRequestValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return GetDetailRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}

	}

	return nil
}

func (m *GetDetailRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetDetailRequestValidationError is the validation error returned by
// GetDetailRequest.Validate if the designated constraints aren't met.
type GetDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailRequestValidationError) ErrorName() string { return "GetDetailRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailRequestValidationError{}

// Validate checks the field values on GetSubscriptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubscriptionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetPackageUuid()); err != nil {
		return GetSubscriptionsRequestValidationError{
			field:  "PackageUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for CustomerNumber

	return nil
}

func (m *GetSubscriptionsRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSubscriptionsRequestValidationError is the validation error returned by
// GetSubscriptionsRequest.Validate if the designated constraints aren't met.
type GetSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionsRequestValidationError) ErrorName() string {
	return "GetSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionsRequestValidationError{}

// Validate checks the field values on GetSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubscriptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	// no validation rules for Code

	return nil
}

// GetSubscriptionsResponseValidationError is the validation error returned by
// GetSubscriptionsResponse.Validate if the designated constraints aren't met.
type GetSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionsResponseValidationError) ErrorName() string {
	return "GetSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionsResponseValidationError{}

// Validate checks the field values on GetDetailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDetailResponseValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDetailResponseValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageId

	// no validation rules for Type

	// no validation rules for Duration

	// no validation rules for IntervalTime

	// no validation rules for Quota

	// no validation rules for Price

	// no validation rules for CustomerNumber

	// no validation rules for Status

	// no validation rules for HaveTrialPackage

	// no validation rules for TrialDuration

	// no validation rules for StatusName

	// no validation rules for Uuid

	if v, ok := interface{}(m.GetChargeDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDetailResponseValidationError{
				field:  "ChargeDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDetailResponseValidationError is the validation error returned by
// GetDetailResponse.Validate if the designated constraints aren't met.
type GetDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailResponseValidationError) ErrorName() string {
	return "GetDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailResponseValidationError{}

// Validate checks the field values on GetListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCustomerNumber()) < 0 {
		return GetListRequestValidationError{
			field:  "CustomerNumber",
			reason: "value length must be at least 0 runes",
		}
	}

	return nil
}

// GetListRequestValidationError is the validation error returned by
// GetListRequest.Validate if the designated constraints aren't met.
type GetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListRequestValidationError) ErrorName() string { return "GetListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponseValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponseValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageId

	// no validation rules for Price

	// no validation rules for Service

	// no validation rules for Status

	// no validation rules for StatusName

	// no validation rules for IntervalTime

	if v, ok := interface{}(m.GetChargeDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponseValidationError{
				field:  "ChargeDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on GetListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetListResponseValidationError is the validation error returned by
// GetListResponse.Validate if the designated constraints aren't met.
type GetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListResponseValidationError) ErrorName() string { return "GetListResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListResponseValidationError{}

// Validate checks the field values on GetPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		return GetPackagesRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for PromoCode

	return nil
}

func (m *GetPackagesRequest) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPackagesRequestValidationError is the validation error returned by
// GetPackagesRequest.Validate if the designated constraints aren't met.
type GetPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagesRequestValidationError) ErrorName() string {
	return "GetPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagesRequestValidationError{}

// Validate checks the field values on Promotion with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Promotion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uuid

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for Value

	if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromotionValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromotionValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Meta

	return nil
}

// PromotionValidationError is the validation error returned by
// Promotion.Validate if the designated constraints aren't met.
type PromotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionValidationError) ErrorName() string { return "PromotionValidationError" }

// Error satisfies the builtin error interface
func (e PromotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionValidationError{}

// Validate checks the field values on GetPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackagesResponseValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackagesResponseValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for Active

	// no validation rules for Type

	// no validation rules for CustomerNumber

	// no validation rules for Meta

	// no validation rules for HaveTrialPackage

	// no validation rules for TrialDuration

	// no validation rules for IntervalTime

	// no validation rules for Quota

	// no validation rules for Duration

	// no validation rules for ServiceName

	// no validation rules for Currency

	if v, ok := interface{}(m.GetPromotion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackagesResponseValidationError{
				field:  "Promotion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPackagesResponseValidationError is the validation error returned by
// GetPackagesResponse.Validate if the designated constraints aren't met.
type GetPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagesResponseValidationError) ErrorName() string {
	return "GetPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagesResponseValidationError{}

// Validate checks the field values on UUIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UUIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uuid

	return nil
}

// UUIDRequestValidationError is the validation error returned by
// UUIDRequest.Validate if the designated constraints aren't met.
type UUIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDRequestValidationError) ErrorName() string { return "UUIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e UUIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDRequestValidationError{}

// Validate checks the field values on MessageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MessageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StatusCode

	return nil
}

// MessageResponseValidationError is the validation error returned by
// MessageResponse.Validate if the designated constraints aren't met.
type MessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageResponseValidationError) ErrorName() string { return "MessageResponseValidationError" }

// Error satisfies the builtin error interface
func (e MessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageResponseValidationError{}

// Validate checks the field values on PaymentGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MethodName

	// no validation rules for MethodType

	// no validation rules for MethodURL

	// no validation rules for Active

	// no validation rules for HttpType

	for idx, item := range m.GetParam() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentGatewayRequestValidationError{
					field:  fmt.Sprintf("Param[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaymentGatewayRequestValidationError is the validation error returned by
// PaymentGatewayRequest.Validate if the designated constraints aren't met.
type PaymentGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentGatewayRequestValidationError) ErrorName() string {
	return "PaymentGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentGatewayRequestValidationError{}

// Validate checks the field values on PaymentGatewayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentGatewayResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MethodName

	// no validation rules for MethodType

	// no validation rules for MethodURL

	// no validation rules for Active

	// no validation rules for HttpType

	for idx, item := range m.GetParam() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentGatewayResponseValidationError{
					field:  fmt.Sprintf("Param[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaymentGatewayResponseValidationError is the validation error returned by
// PaymentGatewayResponse.Validate if the designated constraints aren't met.
type PaymentGatewayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentGatewayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentGatewayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentGatewayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentGatewayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentGatewayResponseValidationError) ErrorName() string {
	return "PaymentGatewayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentGatewayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentGatewayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentGatewayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentGatewayResponseValidationError{}

// Validate checks the field values on PaymentGatewayParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentGatewayParam) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Type

	return nil
}

// PaymentGatewayParamValidationError is the validation error returned by
// PaymentGatewayParam.Validate if the designated constraints aren't met.
type PaymentGatewayParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentGatewayParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentGatewayParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentGatewayParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentGatewayParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentGatewayParamValidationError) ErrorName() string {
	return "PaymentGatewayParamValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentGatewayParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentGatewayParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentGatewayParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentGatewayParamValidationError{}

// Validate checks the field values on ListPaymentGatewaysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPaymentGatewaysResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentGatewaysResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPaymentGatewaysResponseValidationError is the validation error returned
// by ListPaymentGatewaysResponse.Validate if the designated constraints
// aren't met.
type ListPaymentGatewaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentGatewaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentGatewaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentGatewaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentGatewaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentGatewaysResponseValidationError) ErrorName() string {
	return "ListPaymentGatewaysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentGatewaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentGatewaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentGatewaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentGatewaysResponseValidationError{}
