// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/email/proto/message.proto

package system_micro_srv_email

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EmailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for To

	// no validation rules for Cc

	// no validation rules for ToName

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for Bcc

	// no validation rules for IsHtml

	return nil
}

// EmailRequestValidationError is the validation error returned by
// EmailRequest.Validate if the designated constraints aren't met.
type EmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailRequestValidationError) ErrorName() string { return "EmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailRequestValidationError{}

// Validate checks the field values on EmailResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for ErrorMessage

	return nil
}

// EmailResponseValidationError is the validation error returned by
// EmailResponse.Validate if the designated constraints aren't met.
type EmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailResponseValidationError) ErrorName() string { return "EmailResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailResponseValidationError{}
