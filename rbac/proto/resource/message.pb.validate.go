// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource/message.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ServiceByShortNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceByShortNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ServiceByShortNameRequest_ShortName_NotInLookup[m.GetShortName()]; ok {
		return ServiceByShortNameRequestValidationError{
			field:  "ShortName",
			reason: "value must not be in list []",
		}
	}

	return nil
}

// ServiceByShortNameRequestValidationError is the validation error returned by
// ServiceByShortNameRequest.Validate if the designated constraints aren't met.
type ServiceByShortNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceByShortNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceByShortNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceByShortNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceByShortNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceByShortNameRequestValidationError) ErrorName() string {
	return "ServiceByShortNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceByShortNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceByShortNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceByShortNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceByShortNameRequestValidationError{}

var _ServiceByShortNameRequest_ShortName_NotInLookup = map[string]struct{}{
	"": {},
}

// Validate checks the field values on RegisterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RegisterInfoRequest_Name_NotInLookup[m.GetName()]; ok {
		return RegisterInfoRequestValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
	}

	if _, ok := _RegisterInfoRequest_ShortName_NotInLookup[m.GetShortName()]; ok {
		return RegisterInfoRequestValidationError{
			field:  "ShortName",
			reason: "value must not be in list []",
		}
	}

	if _, ok := _RegisterInfoRequest_Description_NotInLookup[m.GetDescription()]; ok {
		return RegisterInfoRequestValidationError{
			field:  "Description",
			reason: "value must not be in list []",
		}
	}

	// no validation rules for IsCharge

	if len(m.GetData()) < 1 {
		return RegisterInfoRequestValidationError{
			field:  "Data",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterInfoRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RegisterInfoRequestValidationError is the validation error returned by
// RegisterInfoRequest.Validate if the designated constraints aren't met.
type RegisterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterInfoRequestValidationError) ErrorName() string {
	return "RegisterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterInfoRequestValidationError{}

var _RegisterInfoRequest_Name_NotInLookup = map[string]struct{}{
	"": {},
}

var _RegisterInfoRequest_ShortName_NotInLookup = map[string]struct{}{
	"": {},
}

var _RegisterInfoRequest_Description_NotInLookup = map[string]struct{}{
	"": {},
}

// Validate checks the field values on ResourceType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceType) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ResourceType_Name_NotInLookup[m.GetName()]; ok {
		return ResourceTypeValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
	}

	// no validation rules for Description

	if len(m.GetData()) < 1 {
		return ResourceTypeValidationError{
			field:  "Data",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceTypeValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResourceTypeValidationError is the validation error returned by
// ResourceType.Validate if the designated constraints aren't met.
type ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceTypeValidationError) ErrorName() string { return "ResourceTypeValidationError" }

// Error satisfies the builtin error interface
func (e ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceTypeValidationError{}

var _ResourceType_Name_NotInLookup = map[string]struct{}{
	"": {},
}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Action_Name_NotInLookup[m.GetName()]; ok {
		return ActionValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
	}

	if _, ok := _Action_Type_InLookup[m.GetType()]; !ok {
		return ActionValidationError{
			field:  "Type",
			reason: "value must be in list [Read Write List PermissionManagement]",
		}
	}

	// no validation rules for Description

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

var _Action_Name_NotInLookup = map[string]struct{}{
	"": {},
}

var _Action_Type_InLookup = map[string]struct{}{
	"Read":                 {},
	"Write":                {},
	"List":                 {},
	"PermissionManagement": {},
}

// Validate checks the field values on ServiceInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Name

	// no validation rules for ShortName

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for IsActive

	// no validation rules for IsCharge

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceInfoResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceInfoResponseValidationError is the validation error returned by
// ServiceInfoResponse.Validate if the designated constraints aren't met.
type ServiceInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInfoResponseValidationError) ErrorName() string {
	return "ServiceInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInfoResponseValidationError{}
