// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: resource/message.proto

package message

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ResourceSvc service

type ResourceSvcService interface {
	RegisterService(ctx context.Context, in *RegisterInfoRequest, opts ...client.CallOption) (*ServiceInfoResponse, error)
	UpdateService(ctx context.Context, in *RegisterInfoRequest, opts ...client.CallOption) (*ServiceInfoResponse, error)
	GetServiceByShortName(ctx context.Context, in *ServiceByShortNameRequest, opts ...client.CallOption) (*ServiceInfoResponse, error)
}

type resourceSvcService struct {
	c    client.Client
	name string
}

func NewResourceSvcService(name string, c client.Client) ResourceSvcService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "resourcesvc"
	}
	return &resourceSvcService{
		c:    c,
		name: name,
	}
}

func (c *resourceSvcService) RegisterService(ctx context.Context, in *RegisterInfoRequest, opts ...client.CallOption) (*ServiceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ResourceSvc.RegisterService", in)
	out := new(ServiceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceSvcService) UpdateService(ctx context.Context, in *RegisterInfoRequest, opts ...client.CallOption) (*ServiceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ResourceSvc.UpdateService", in)
	out := new(ServiceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceSvcService) GetServiceByShortName(ctx context.Context, in *ServiceByShortNameRequest, opts ...client.CallOption) (*ServiceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ResourceSvc.GetServiceByShortName", in)
	out := new(ServiceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceSvc service

type ResourceSvcHandler interface {
	RegisterService(context.Context, *RegisterInfoRequest, *ServiceInfoResponse) error
	UpdateService(context.Context, *RegisterInfoRequest, *ServiceInfoResponse) error
	GetServiceByShortName(context.Context, *ServiceByShortNameRequest, *ServiceInfoResponse) error
}

func RegisterResourceSvcHandler(s server.Server, hdlr ResourceSvcHandler, opts ...server.HandlerOption) error {
	type resourceSvc interface {
		RegisterService(ctx context.Context, in *RegisterInfoRequest, out *ServiceInfoResponse) error
		UpdateService(ctx context.Context, in *RegisterInfoRequest, out *ServiceInfoResponse) error
		GetServiceByShortName(ctx context.Context, in *ServiceByShortNameRequest, out *ServiceInfoResponse) error
	}
	type ResourceSvc struct {
		resourceSvc
	}
	h := &resourceSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&ResourceSvc{h}, opts...))
}

type resourceSvcHandler struct {
	ResourceSvcHandler
}

func (h *resourceSvcHandler) RegisterService(ctx context.Context, in *RegisterInfoRequest, out *ServiceInfoResponse) error {
	return h.ResourceSvcHandler.RegisterService(ctx, in, out)
}

func (h *resourceSvcHandler) UpdateService(ctx context.Context, in *RegisterInfoRequest, out *ServiceInfoResponse) error {
	return h.ResourceSvcHandler.UpdateService(ctx, in, out)
}

func (h *resourceSvcHandler) GetServiceByShortName(ctx context.Context, in *ServiceByShortNameRequest, out *ServiceInfoResponse) error {
	return h.ResourceSvcHandler.GetServiceByShortName(ctx, in, out)
}
