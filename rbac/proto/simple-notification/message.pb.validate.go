// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: simple-notification/message.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on NotifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NotifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetThing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyRequestValidationError{
				field:  "Thing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyRequestValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyRequestValidationError{
				field:  "Zone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CustomerNumber

	// no validation rules for Type

	// no validation rules for Value

	// no validation rules for MacAddress

	if v, ok := interface{}(m.GetClientConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyRequestValidationError{
				field:  "ClientConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	return nil
}

// NotifyRequestValidationError is the validation error returned by
// NotifyRequest.Validate if the designated constraints aren't met.
type NotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRequestValidationError) ErrorName() string { return "NotifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e NotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRequestValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetThing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Thing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Zone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CustomerNumber

	// no validation rules for MacAddress

	// no validation rules for Type

	// no validation rules for Value

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on GetNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	// no validation rules for Serial

	return nil
}

// GetNotificationRequestValidationError is the validation error returned by
// GetNotificationRequest.Validate if the designated constraints aren't met.
type GetNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationRequestValidationError) ErrorName() string {
	return "GetNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationRequestValidationError{}

// Validate checks the field values on GetNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for ErrorMessage

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotificationResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetNotificationResponseValidationError is the validation error returned by
// GetNotificationResponse.Validate if the designated constraints aren't met.
type GetNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationResponseValidationError) ErrorName() string {
	return "GetNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationResponseValidationError{}

// Validate checks the field values on NotificationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ThingName

	// no validation rules for ThingSerial

	// no validation rules for ThingDisplayName

	// no validation rules for GatewayName

	// no validation rules for GatewayDisplayName

	// no validation rules for GatewayMacAddress

	// no validation rules for ZoneName

	// no validation rules for ZoneDisplayName

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for Template

	// no validation rules for State

	// no validation rules for Description

	// no validation rules for DescriptionVN

	// no validation rules for AlertType

	// no validation rules for DateTime

	// no validation rules for Acknowledged

	// no validation rules for AlertStatus

	// no validation rules for DeviceId

	return nil
}

// NotificationResultValidationError is the validation error returned by
// NotificationResult.Validate if the designated constraints aren't met.
type NotificationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationResultValidationError) ErrorName() string {
	return "NotificationResultValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationResultValidationError{}
