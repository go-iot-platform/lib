// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: alert/message.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AlertSrv service

type AlertSrvService interface {
	CheckAlert(ctx context.Context, in *AlertRequest, opts ...client.CallOption) (*AlertResponse, error)
	GetAlertTypes(ctx context.Context, in *AlertTypeRequest, opts ...client.CallOption) (*AlertTypeResponse, error)
	GetAlertTypesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ScheduleStatusAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ScheduleActionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type alertSrvService struct {
	c    client.Client
	name string
}

func NewAlertSrvService(name string, c client.Client) AlertSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "alertsrv"
	}
	return &alertSrvService{
		c:    c,
		name: name,
	}
}

func (c *alertSrvService) CheckAlert(ctx context.Context, in *AlertRequest, opts ...client.CallOption) (*AlertResponse, error) {
	req := c.c.NewRequest(c.name, "AlertSrv.CheckAlert", in)
	out := new(AlertResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSrvService) GetAlertTypes(ctx context.Context, in *AlertTypeRequest, opts ...client.CallOption) (*AlertTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AlertSrv.GetAlertTypes", in)
	out := new(AlertTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSrvService) GetAlertTypesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "AlertSrv.GetAlertTypesAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSrvService) ScheduleStatusAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "AlertSrv.ScheduleStatusAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSrvService) ScheduleActionAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "AlertSrv.ScheduleActionAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlertSrv service

type AlertSrvHandler interface {
	CheckAlert(context.Context, *AlertRequest, *AlertResponse) error
	GetAlertTypes(context.Context, *AlertTypeRequest, *AlertTypeResponse) error
	GetAlertTypesAPI(context.Context, *proto1.Request, *proto1.Response) error
	ScheduleStatusAPI(context.Context, *proto1.Request, *proto1.Response) error
	ScheduleActionAPI(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterAlertSrvHandler(s server.Server, hdlr AlertSrvHandler, opts ...server.HandlerOption) error {
	type alertSrv interface {
		CheckAlert(ctx context.Context, in *AlertRequest, out *AlertResponse) error
		GetAlertTypes(ctx context.Context, in *AlertTypeRequest, out *AlertTypeResponse) error
		GetAlertTypesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ScheduleStatusAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ScheduleActionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type AlertSrv struct {
		alertSrv
	}
	h := &alertSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&AlertSrv{h}, opts...))
}

type alertSrvHandler struct {
	AlertSrvHandler
}

func (h *alertSrvHandler) CheckAlert(ctx context.Context, in *AlertRequest, out *AlertResponse) error {
	return h.AlertSrvHandler.CheckAlert(ctx, in, out)
}

func (h *alertSrvHandler) GetAlertTypes(ctx context.Context, in *AlertTypeRequest, out *AlertTypeResponse) error {
	return h.AlertSrvHandler.GetAlertTypes(ctx, in, out)
}

func (h *alertSrvHandler) GetAlertTypesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.AlertSrvHandler.GetAlertTypesAPI(ctx, in, out)
}

func (h *alertSrvHandler) ScheduleStatusAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.AlertSrvHandler.ScheduleStatusAPI(ctx, in, out)
}

func (h *alertSrvHandler) ScheduleActionAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.AlertSrvHandler.ScheduleActionAPI(ctx, in, out)
}
