// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: policy/message.proto

package message

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Api service

type ApiService interface {
	ListPoliciesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetByPolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetByUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetByGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	CreatePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	UpdatePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DeletePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	AttachPolicyToGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DetachPolicyFromGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	AttachPolicyToUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DetachPolicyFromUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type apiService struct {
	c    client.Client
	name string
}

func NewApiService(name string, c client.Client) ApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &apiService{
		c:    c,
		name: name,
	}
}

func (c *apiService) ListPoliciesAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.ListPoliciesAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) GetByPolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.GetByPolicyAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) GetByUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.GetByUserAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) GetByGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.GetByGroupAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) CreatePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.CreatePolicyAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) UpdatePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.UpdatePolicyAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) DeletePolicyAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.DeletePolicyAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) AttachPolicyToGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.AttachPolicyToGroupAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) DetachPolicyFromGroupAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.DetachPolicyFromGroupAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) AttachPolicyToUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.AttachPolicyToUserAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) DetachPolicyFromUserAPI(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Api.DetachPolicyFromUserAPI", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	ListPoliciesAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetByPolicyAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetByUserAPI(context.Context, *proto1.Request, *proto1.Response) error
	GetByGroupAPI(context.Context, *proto1.Request, *proto1.Response) error
	CreatePolicyAPI(context.Context, *proto1.Request, *proto1.Response) error
	UpdatePolicyAPI(context.Context, *proto1.Request, *proto1.Response) error
	DeletePolicyAPI(context.Context, *proto1.Request, *proto1.Response) error
	AttachPolicyToGroupAPI(context.Context, *proto1.Request, *proto1.Response) error
	DetachPolicyFromGroupAPI(context.Context, *proto1.Request, *proto1.Response) error
	AttachPolicyToUserAPI(context.Context, *proto1.Request, *proto1.Response) error
	DetachPolicyFromUserAPI(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler, opts ...server.HandlerOption) error {
	type api interface {
		ListPoliciesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetByPolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetByUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetByGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		CreatePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		UpdatePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DeletePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		AttachPolicyToGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DetachPolicyFromGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		AttachPolicyToUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DetachPolicyFromUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Api struct {
		api
	}
	h := &apiHandler{hdlr}
	return s.Handle(s.NewHandler(&Api{h}, opts...))
}

type apiHandler struct {
	ApiHandler
}

func (h *apiHandler) ListPoliciesAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.ListPoliciesAPI(ctx, in, out)
}

func (h *apiHandler) GetByPolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.GetByPolicyAPI(ctx, in, out)
}

func (h *apiHandler) GetByUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.GetByUserAPI(ctx, in, out)
}

func (h *apiHandler) GetByGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.GetByGroupAPI(ctx, in, out)
}

func (h *apiHandler) CreatePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.CreatePolicyAPI(ctx, in, out)
}

func (h *apiHandler) UpdatePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.UpdatePolicyAPI(ctx, in, out)
}

func (h *apiHandler) DeletePolicyAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.DeletePolicyAPI(ctx, in, out)
}

func (h *apiHandler) AttachPolicyToGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.AttachPolicyToGroupAPI(ctx, in, out)
}

func (h *apiHandler) DetachPolicyFromGroupAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.DetachPolicyFromGroupAPI(ctx, in, out)
}

func (h *apiHandler) AttachPolicyToUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.AttachPolicyToUserAPI(ctx, in, out)
}

func (h *apiHandler) DetachPolicyFromUserAPI(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ApiHandler.DetachPolicyFromUserAPI(ctx, in, out)
}

// Client API for System service

type SystemService interface {
	BindSystemPolicy(ctx context.Context, in *BindSystemPolicyRequest, opts ...client.CallOption) (*BindResponse, error)
	BindUserPolicy(ctx context.Context, in *BindUserPolicyRequest, opts ...client.CallOption) (*BindResponse, error)
	GetSystemPolicies(ctx context.Context, in *GetSystemPoliciesRequest, opts ...client.CallOption) (*GetSystemPoliciesResponse, error)
	GetSystemPoliciesByUserId(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*GetSystemPoliciesByUserIdResponse, error)
	GetSystemPolicyByName(ctx context.Context, in *PolicyNameRequest, opts ...client.CallOption) (*PolicyData, error)
}

type systemService struct {
	c    client.Client
	name string
}

func NewSystemService(name string, c client.Client) SystemService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "system"
	}
	return &systemService{
		c:    c,
		name: name,
	}
}

func (c *systemService) BindSystemPolicy(ctx context.Context, in *BindSystemPolicyRequest, opts ...client.CallOption) (*BindResponse, error) {
	req := c.c.NewRequest(c.name, "System.BindSystemPolicy", in)
	out := new(BindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) BindUserPolicy(ctx context.Context, in *BindUserPolicyRequest, opts ...client.CallOption) (*BindResponse, error) {
	req := c.c.NewRequest(c.name, "System.BindUserPolicy", in)
	out := new(BindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) GetSystemPolicies(ctx context.Context, in *GetSystemPoliciesRequest, opts ...client.CallOption) (*GetSystemPoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "System.GetSystemPolicies", in)
	out := new(GetSystemPoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) GetSystemPoliciesByUserId(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*GetSystemPoliciesByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "System.GetSystemPoliciesByUserId", in)
	out := new(GetSystemPoliciesByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) GetSystemPolicyByName(ctx context.Context, in *PolicyNameRequest, opts ...client.CallOption) (*PolicyData, error) {
	req := c.c.NewRequest(c.name, "System.GetSystemPolicyByName", in)
	out := new(PolicyData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemHandler interface {
	BindSystemPolicy(context.Context, *BindSystemPolicyRequest, *BindResponse) error
	BindUserPolicy(context.Context, *BindUserPolicyRequest, *BindResponse) error
	GetSystemPolicies(context.Context, *GetSystemPoliciesRequest, *GetSystemPoliciesResponse) error
	GetSystemPoliciesByUserId(context.Context, *UserIdRequest, *GetSystemPoliciesByUserIdResponse) error
	GetSystemPolicyByName(context.Context, *PolicyNameRequest, *PolicyData) error
}

func RegisterSystemHandler(s server.Server, hdlr SystemHandler, opts ...server.HandlerOption) error {
	type system interface {
		BindSystemPolicy(ctx context.Context, in *BindSystemPolicyRequest, out *BindResponse) error
		BindUserPolicy(ctx context.Context, in *BindUserPolicyRequest, out *BindResponse) error
		GetSystemPolicies(ctx context.Context, in *GetSystemPoliciesRequest, out *GetSystemPoliciesResponse) error
		GetSystemPoliciesByUserId(ctx context.Context, in *UserIdRequest, out *GetSystemPoliciesByUserIdResponse) error
		GetSystemPolicyByName(ctx context.Context, in *PolicyNameRequest, out *PolicyData) error
	}
	type System struct {
		system
	}
	h := &systemHandler{hdlr}
	return s.Handle(s.NewHandler(&System{h}, opts...))
}

type systemHandler struct {
	SystemHandler
}

func (h *systemHandler) BindSystemPolicy(ctx context.Context, in *BindSystemPolicyRequest, out *BindResponse) error {
	return h.SystemHandler.BindSystemPolicy(ctx, in, out)
}

func (h *systemHandler) BindUserPolicy(ctx context.Context, in *BindUserPolicyRequest, out *BindResponse) error {
	return h.SystemHandler.BindUserPolicy(ctx, in, out)
}

func (h *systemHandler) GetSystemPolicies(ctx context.Context, in *GetSystemPoliciesRequest, out *GetSystemPoliciesResponse) error {
	return h.SystemHandler.GetSystemPolicies(ctx, in, out)
}

func (h *systemHandler) GetSystemPoliciesByUserId(ctx context.Context, in *UserIdRequest, out *GetSystemPoliciesByUserIdResponse) error {
	return h.SystemHandler.GetSystemPoliciesByUserId(ctx, in, out)
}

func (h *systemHandler) GetSystemPolicyByName(ctx context.Context, in *PolicyNameRequest, out *PolicyData) error {
	return h.SystemHandler.GetSystemPolicyByName(ctx, in, out)
}

// Client API for Group service

type GroupService interface {
	ListGroups(ctx context.Context, in *ListGroupRequest, opts ...client.CallOption) (*ListGroupResponse, error)
	UpdateListUsersCacheByGroupId(ctx context.Context, in *GroupIdRequest, opts ...client.CallOption) (*ListUserResponse, error)
	UpdateUserCacheInGroup(ctx context.Context, in *GroupIdRequest, opts ...client.CallOption) (*ListPoliciesResponse, error)
}

type groupService struct {
	c    client.Client
	name string
}

func NewGroupService(name string, c client.Client) GroupService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "group"
	}
	return &groupService{
		c:    c,
		name: name,
	}
}

func (c *groupService) ListGroups(ctx context.Context, in *ListGroupRequest, opts ...client.CallOption) (*ListGroupResponse, error) {
	req := c.c.NewRequest(c.name, "Group.ListGroups", in)
	out := new(ListGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) UpdateListUsersCacheByGroupId(ctx context.Context, in *GroupIdRequest, opts ...client.CallOption) (*ListUserResponse, error) {
	req := c.c.NewRequest(c.name, "Group.UpdateListUsersCacheByGroupId", in)
	out := new(ListUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) UpdateUserCacheInGroup(ctx context.Context, in *GroupIdRequest, opts ...client.CallOption) (*ListPoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Group.UpdateUserCacheInGroup", in)
	out := new(ListPoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Group service

type GroupHandler interface {
	ListGroups(context.Context, *ListGroupRequest, *ListGroupResponse) error
	UpdateListUsersCacheByGroupId(context.Context, *GroupIdRequest, *ListUserResponse) error
	UpdateUserCacheInGroup(context.Context, *GroupIdRequest, *ListPoliciesResponse) error
}

func RegisterGroupHandler(s server.Server, hdlr GroupHandler, opts ...server.HandlerOption) error {
	type group interface {
		ListGroups(ctx context.Context, in *ListGroupRequest, out *ListGroupResponse) error
		UpdateListUsersCacheByGroupId(ctx context.Context, in *GroupIdRequest, out *ListUserResponse) error
		UpdateUserCacheInGroup(ctx context.Context, in *GroupIdRequest, out *ListPoliciesResponse) error
	}
	type Group struct {
		group
	}
	h := &groupHandler{hdlr}
	return s.Handle(s.NewHandler(&Group{h}, opts...))
}

type groupHandler struct {
	GroupHandler
}

func (h *groupHandler) ListGroups(ctx context.Context, in *ListGroupRequest, out *ListGroupResponse) error {
	return h.GroupHandler.ListGroups(ctx, in, out)
}

func (h *groupHandler) UpdateListUsersCacheByGroupId(ctx context.Context, in *GroupIdRequest, out *ListUserResponse) error {
	return h.GroupHandler.UpdateListUsersCacheByGroupId(ctx, in, out)
}

func (h *groupHandler) UpdateUserCacheInGroup(ctx context.Context, in *GroupIdRequest, out *ListPoliciesResponse) error {
	return h.GroupHandler.UpdateUserCacheInGroup(ctx, in, out)
}

// Client API for User service

type UserService interface {
	ListUsers(ctx context.Context, in *ListUserRequest, opts ...client.CallOption) (*ListUsersResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) ListUsers(ctx context.Context, in *ListUserRequest, opts ...client.CallOption) (*ListUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.ListUsers", in)
	out := new(ListUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	ListUsers(context.Context, *ListUserRequest, *ListUsersResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		ListUsers(ctx context.Context, in *ListUserRequest, out *ListUsersResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) ListUsers(ctx context.Context, in *ListUserRequest, out *ListUsersResponse) error {
	return h.UserHandler.ListUsers(ctx, in, out)
}

// Client API for Policy service

type PolicyService interface {
	// List all Policies
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...client.CallOption) (*PoliciesResponse, error)
	Resources(ctx context.Context, in *GetByResourceRequest, opts ...client.CallOption) (*GetByResourceResponse, error)
	Groups(ctx context.Context, in *GetByGroupRequest, opts ...client.CallOption) (*GetByGroupResponse, error)
	GetListPoliciesByUserId(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*PoliciesResponse, error)
	GetPolicyByName(ctx context.Context, in *PolicyNameRequest, opts ...client.CallOption) (*PolicyData, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error)
	GetPolicyByPolicyId(ctx context.Context, in *PolicyIdRequest, opts ...client.CallOption) (*PolicyData, error)
	UpdatePolicyByPolicyId(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*PolicyData, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...client.CallOption) (*DeletePolicyResponse, error)
	AttachPolicyToGroup(ctx context.Context, in *AttachPolicyRequest, opts ...client.CallOption) (*PoliciesResponse, error)
	DetachPolicyFromGroup(ctx context.Context, in *DetachPolicyRequest, opts ...client.CallOption) (*PoliciesResponse, error)
	AttachPolicyToUser(ctx context.Context, in *AttachPolicyToUserRequest, opts ...client.CallOption) (*PoliciesResponse, error)
	DetachPolicyFromUser(ctx context.Context, in *DetachPolicyFromUserRequest, opts ...client.CallOption) (*PoliciesResponse, error)
}

type policyService struct {
	c    client.Client
	name string
}

func NewPolicyService(name string, c client.Client) PolicyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "policy"
	}
	return &policyService{
		c:    c,
		name: name,
	}
}

func (c *policyService) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.ListPolicies", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) Resources(ctx context.Context, in *GetByResourceRequest, opts ...client.CallOption) (*GetByResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.Resources", in)
	out := new(GetByResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) Groups(ctx context.Context, in *GetByGroupRequest, opts ...client.CallOption) (*GetByGroupResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.Groups", in)
	out := new(GetByGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) GetListPoliciesByUserId(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.GetListPoliciesByUserId", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) GetPolicyByName(ctx context.Context, in *PolicyNameRequest, opts ...client.CallOption) (*PolicyData, error) {
	req := c.c.NewRequest(c.name, "Policy.GetPolicyByName", in)
	out := new(PolicyData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.CreatePolicy", in)
	out := new(CreatePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) GetPolicyByPolicyId(ctx context.Context, in *PolicyIdRequest, opts ...client.CallOption) (*PolicyData, error) {
	req := c.c.NewRequest(c.name, "Policy.GetPolicyByPolicyId", in)
	out := new(PolicyData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) UpdatePolicyByPolicyId(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*PolicyData, error) {
	req := c.c.NewRequest(c.name, "Policy.UpdatePolicyByPolicyId", in)
	out := new(PolicyData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...client.CallOption) (*DeletePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.DeletePolicy", in)
	out := new(DeletePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) AttachPolicyToGroup(ctx context.Context, in *AttachPolicyRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.AttachPolicyToGroup", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) DetachPolicyFromGroup(ctx context.Context, in *DetachPolicyRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.DetachPolicyFromGroup", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) AttachPolicyToUser(ctx context.Context, in *AttachPolicyToUserRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.AttachPolicyToUser", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyService) DetachPolicyFromUser(ctx context.Context, in *DetachPolicyFromUserRequest, opts ...client.CallOption) (*PoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "Policy.DetachPolicyFromUser", in)
	out := new(PoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Policy service

type PolicyHandler interface {
	// List all Policies
	ListPolicies(context.Context, *ListPoliciesRequest, *PoliciesResponse) error
	Resources(context.Context, *GetByResourceRequest, *GetByResourceResponse) error
	Groups(context.Context, *GetByGroupRequest, *GetByGroupResponse) error
	GetListPoliciesByUserId(context.Context, *UserIdRequest, *PoliciesResponse) error
	GetPolicyByName(context.Context, *PolicyNameRequest, *PolicyData) error
	CreatePolicy(context.Context, *CreatePolicyRequest, *CreatePolicyResponse) error
	GetPolicyByPolicyId(context.Context, *PolicyIdRequest, *PolicyData) error
	UpdatePolicyByPolicyId(context.Context, *UpdateInfoRequest, *PolicyData) error
	DeletePolicy(context.Context, *DeletePolicyRequest, *DeletePolicyResponse) error
	AttachPolicyToGroup(context.Context, *AttachPolicyRequest, *PoliciesResponse) error
	DetachPolicyFromGroup(context.Context, *DetachPolicyRequest, *PoliciesResponse) error
	AttachPolicyToUser(context.Context, *AttachPolicyToUserRequest, *PoliciesResponse) error
	DetachPolicyFromUser(context.Context, *DetachPolicyFromUserRequest, *PoliciesResponse) error
}

func RegisterPolicyHandler(s server.Server, hdlr PolicyHandler, opts ...server.HandlerOption) error {
	type policy interface {
		ListPolicies(ctx context.Context, in *ListPoliciesRequest, out *PoliciesResponse) error
		Resources(ctx context.Context, in *GetByResourceRequest, out *GetByResourceResponse) error
		Groups(ctx context.Context, in *GetByGroupRequest, out *GetByGroupResponse) error
		GetListPoliciesByUserId(ctx context.Context, in *UserIdRequest, out *PoliciesResponse) error
		GetPolicyByName(ctx context.Context, in *PolicyNameRequest, out *PolicyData) error
		CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error
		GetPolicyByPolicyId(ctx context.Context, in *PolicyIdRequest, out *PolicyData) error
		UpdatePolicyByPolicyId(ctx context.Context, in *UpdateInfoRequest, out *PolicyData) error
		DeletePolicy(ctx context.Context, in *DeletePolicyRequest, out *DeletePolicyResponse) error
		AttachPolicyToGroup(ctx context.Context, in *AttachPolicyRequest, out *PoliciesResponse) error
		DetachPolicyFromGroup(ctx context.Context, in *DetachPolicyRequest, out *PoliciesResponse) error
		AttachPolicyToUser(ctx context.Context, in *AttachPolicyToUserRequest, out *PoliciesResponse) error
		DetachPolicyFromUser(ctx context.Context, in *DetachPolicyFromUserRequest, out *PoliciesResponse) error
	}
	type Policy struct {
		policy
	}
	h := &policyHandler{hdlr}
	return s.Handle(s.NewHandler(&Policy{h}, opts...))
}

type policyHandler struct {
	PolicyHandler
}

func (h *policyHandler) ListPolicies(ctx context.Context, in *ListPoliciesRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.ListPolicies(ctx, in, out)
}

func (h *policyHandler) Resources(ctx context.Context, in *GetByResourceRequest, out *GetByResourceResponse) error {
	return h.PolicyHandler.Resources(ctx, in, out)
}

func (h *policyHandler) Groups(ctx context.Context, in *GetByGroupRequest, out *GetByGroupResponse) error {
	return h.PolicyHandler.Groups(ctx, in, out)
}

func (h *policyHandler) GetListPoliciesByUserId(ctx context.Context, in *UserIdRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.GetListPoliciesByUserId(ctx, in, out)
}

func (h *policyHandler) GetPolicyByName(ctx context.Context, in *PolicyNameRequest, out *PolicyData) error {
	return h.PolicyHandler.GetPolicyByName(ctx, in, out)
}

func (h *policyHandler) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error {
	return h.PolicyHandler.CreatePolicy(ctx, in, out)
}

func (h *policyHandler) GetPolicyByPolicyId(ctx context.Context, in *PolicyIdRequest, out *PolicyData) error {
	return h.PolicyHandler.GetPolicyByPolicyId(ctx, in, out)
}

func (h *policyHandler) UpdatePolicyByPolicyId(ctx context.Context, in *UpdateInfoRequest, out *PolicyData) error {
	return h.PolicyHandler.UpdatePolicyByPolicyId(ctx, in, out)
}

func (h *policyHandler) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, out *DeletePolicyResponse) error {
	return h.PolicyHandler.DeletePolicy(ctx, in, out)
}

func (h *policyHandler) AttachPolicyToGroup(ctx context.Context, in *AttachPolicyRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.AttachPolicyToGroup(ctx, in, out)
}

func (h *policyHandler) DetachPolicyFromGroup(ctx context.Context, in *DetachPolicyRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.DetachPolicyFromGroup(ctx, in, out)
}

func (h *policyHandler) AttachPolicyToUser(ctx context.Context, in *AttachPolicyToUserRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.AttachPolicyToUser(ctx, in, out)
}

func (h *policyHandler) DetachPolicyFromUser(ctx context.Context, in *DetachPolicyFromUserRequest, out *PoliciesResponse) error {
	return h.PolicyHandler.DetachPolicyFromUser(ctx, in, out)
}
